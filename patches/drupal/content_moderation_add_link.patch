Index: docroot/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php	(revision )
+++ b/core/modules/content_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php	(revision )
@@ -108,41 +108,43 @@
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
     /** @var ContentEntityInterface $entity */
     $entity = $items->getEntity();
-
+    if($entity->getEntityType()->getBundleEntityType()) {
-    /* @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
+      /* @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
-    $bundle_entity = $this->entityTypeManager->getStorage($entity->getEntityType()->getBundleEntityType())->load($entity->bundle());
+      $bundle_entity = $this->entityTypeManager->getStorage($entity->getEntityType()
+        ->getBundleEntityType())->load($entity->bundle());
-    if (!$this->moderationInformation->isModeratedEntity($entity)) {
-      // @todo https://www.drupal.org/node/2779933 write a test for this.
-      return $element + ['#access' => FALSE];
-    }
+      if (!$this->moderationInformation->isModeratedEntity($entity)) {
+        // @todo https://www.drupal.org/node/2779933 write a test for this.
+        return $element + ['#access' => FALSE];
+      }

-    $workflow = $this->moderationInformation->getWorkflowForEntity($entity);
-    $default = $items->get($delta)->value ? $workflow->getState($items->get($delta)->value) : $workflow->getInitialState();
-    if (!$default) {
-      throw new \UnexpectedValueException(sprintf('The %s bundle has an invalid moderation state configuration, moderation states are enabled but no default is set.', $bundle_entity->label()));
-    }
+      $workflow = $this->moderationInformation->getWorkflowForEntity($entity);
+      $default = $items->get($delta)->value ? $workflow->getState($items->get($delta)->value) : $workflow->getInitialState();
+      if (!$default) {
+        throw new \UnexpectedValueException(sprintf('The %s bundle has an invalid moderation state configuration, moderation states are enabled but no default is set.', $bundle_entity->label()));
+      }

-    /** @var \Drupal\workflows\Transition[] $transitions */
-    $transitions = $this->validator->getValidTransitions($entity, $this->currentUser);
+      /** @var \Drupal\workflows\Transition[] $transitions */
+      $transitions = $this->validator->getValidTransitions($entity, $this->currentUser);

-    $target_states = [];
-    foreach ($transitions as $transition) {
-      $target_states[$transition->to()->id()] = $transition->label();
-    }
+      $target_states = [];
+      foreach ($transitions as $transition) {
+        $target_states[$transition->to()->id()] = $transition->label();
+      }

-    // @todo https://www.drupal.org/node/2779933 write a test for this.
-    $element += [
-      '#access' => FALSE,
-      '#type' => 'select',
-      '#options' => $target_states,
-      '#default_value' => $default->id(),
-      '#published' => $default->isPublishedState(),
-      '#key_column' => $this->column,
-    ];
-    $element['#element_validate'][] = [get_class($this), 'validateElement'];
+      // @todo https://www.drupal.org/node/2779933 write a test for this.
+      $element += [
+        '#access' => FALSE,
+        '#type' => 'select',
+        '#options' => $target_states,
+        '#default_value' => $default->id(),
+        '#published' => $default->isPublishedState(),
+        '#key_column' => $this->column,
+      ];
+      $element['#element_validate'][] = [get_class($this), 'validateElement'];

-    // Use the dropbutton.
-    $element['#process'][] = [get_called_class(), 'processActions'];
+      // Use the dropbutton.
+      $element['#process'][] = [get_called_class(), 'processActions'];
+    }
     return $element;
   }

