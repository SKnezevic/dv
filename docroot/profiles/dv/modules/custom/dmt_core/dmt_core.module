<?php

/**
 * @file
 * Contains dmt_core.module.
 */

use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\group\Entity\Group;
use Drupal\domain\Entity\Domain;

/**
 * @param array $entity_types
 */
function dmt_core_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['block']->setListBuilderClass('Drupal\dmt_core\BlockListBuilder');
  $entity_types['view']->setListBuilderClass('Drupal\dmt_core\ViewListBuilder');
}

/**
 * Implements hook_config_presave_alter().
 */
function dmt_core_config_alter(&$context) {

  $default_config_name = $context['name'];
  $new_data = $context['data'];

  // check if we are saving domain record if so return
  // otherwise we get in to endless loop
  $list = explode('.', $default_config_name);
  if (isset($list[0]) && isset($list[1]) && $list[0] == 'domain' && $list[1] == 'record') {
    return;
  }

  // check if domain config if so skip alter
  if (isset($list[0]) && isset($list[1]) && $list[0] == 'domain' && $list[1] == 'config') {
    return;
  }

  /** @var \Drupal\domain\Entity\Domain $active */
  $active = \Drupal::service('domain.negotiator')->getActiveDomain();
  if (!$active->isDefault()) {

    /** @var \Drupal\Core\Config\Config $original */
    $original = \Drupal::service('config.factory')
      ->getEditable($default_config_name);
    $original_data = $original->getOriginal();

    $raw_data_diff = dmt_core_config_diff($original_data, $new_data);

    // we don't save config if there are no differences or original
    // configuration was empty
    /// @todo check if we need to write better logic here in some cases
    /// probably when we are saving configuration for one site that was never present
    /// on main site

    if(empty($raw_data_diff) || empty($original_data)) {
      return;
    }

    $context['name'] = 'domain.config.' . $active->id() . '.' . $default_config_name;
    $context['data'] = $raw_data_diff;
  }
}

/**
 * Config diff.
 *
 * @param $original_data
 * @param $new_data
 * @return array
 */
function dmt_core_config_diff($original_data, $new_data) {
  $diff = [];

  foreach ($original_data as $key => $value) {
    $new_data_value = json_encode($new_data[$key]);
    $original_data_value = json_encode($value);

    if($new_data_value != $original_data_value) {
      $diff[$key] = $new_data[$key];
    }

    if(isset($new_data[$key])) {
      unset($new_data[$key]);
    }
  }

  return $diff + $new_data;
}

/**
 * Implements hook_form_alter().
 */
function dmt_core_form_domain_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $domain = $form_state->getFormObject()->getEntity();

  $form['group'] = [
    '#type' => 'entity_autocomplete',
    '#target_type' => 'group',
    '#title' => t('Group'),
    '#description' => t('Select a group you want to use as base for this domain.'),
    '#tags' => FALSE,
    '#default_value' => Group::load($domain->getThirdPartySetting('dmt_core', 'group')),
    '#selection_settings' => array(
      'target_bundles' => array('organisation', 'area_of_activity'),
    ),
    '#weight' => 50,
  ];

  $form['template'] = [
    '#type' => 'entity_autocomplete',
    '#target_type' => 'domain',
    '#selection_handler' => 'dmt:domain',
    '#title' => t('Domain Template'),
    '#default_value' => Domain::load($domain->getThirdPartySetting('dmt_core', 'template')),
    '#description' => t('Select a domain you want to copy the settings.'),
    '#weight' => 51
  ];

  $form['#entity_builders'][] = 'dmt_core_form_domain_add_form_builder';
}

/**
 * Entity builder for the domain configuration entity.
 */
function dmt_core_form_domain_add_form_builder($entity_type, \Drupal\domain\Entity\Domain $domain, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->getValue('group')) {
    $domain->setThirdPartySetting('dmt_core', 'group', $form_state->getValue('group'));
  } else {
    $domain->unsetThirdPartySetting('dmt_core', 'group');
  }

  if ($form_state->getValue('template')) {
    $domain->setThirdPartySetting('dmt_core', 'template', $form_state->getValue('template'));
  } else {
    $domain->unsetThirdPartySetting('dmt_core', 'template');
  }
}
