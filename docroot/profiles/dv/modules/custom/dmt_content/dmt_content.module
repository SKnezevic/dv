<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Auto generate title for content node.
 *
 * Implements hook_entity_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function dmt_content_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() == 'content') {
    /** @var  \Drupal\node\Entity\Node $entity */
    $body_value = strip_tags($entity->get('body')->getValue()[0]['value']);
    $title = substr($body_value, 0, 254);
    $entity->set('title', $title);
    $entity->isDefaultRevision(TRUE);
  }
}

/**
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function dmt_content_form_node_content_form_alter(&$form, FormStateInterface &$form_state) {
  $form['title']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;

  $build_info = $form_state->getBuildInfo();

  // Get the entity
  /** @var \Drupal\Core\Entity\Entity $entity */
  $entity = $build_info['callback_object']->getEntity();
  $entity_id = $entity->id();

  // if we are editing entity
  if ($entity_id) {
    // disable refocus so we don't end up on the bottom of the page
    $form['actions']['submit']['#attributes']['data-disable-refocus'] = 1;
    $form['actions']['submit']['#value'] = t('Save');
    $ajax_id = 'ajax-form-entity-node-content-' . $entity_id;

    $form['actions']['cancel'] = [
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#attributes' => ['class' => ['cancel', 'use-ajax']],
      '#access' => TRUE,
      '#url' => Url::fromRoute(
        'dmt_content.ajax_cancel_link',
        [
          'node' => $entity_id
        ]
      ),
      '#weight' => 100
    ];

  }
  else {
    $form['actions']['submit']['#attributes']['data-disable-refocus'] = 1;
    $form['actions']['submit']['#value'] = t('Add Content');
    // if we are adding new
    $form['#isNew'] = TRUE;
    $ajax_id = 'ajax-form-entity-node-content-new';
  }

  $form['#attributes']['class'][] = $ajax_id;

  // Ajax settings of the buttons.
  $ajax_settings = array(
    'callback' => 'Drupal\dmt_content\Form\ContentFormAlter::ajaxFormEntityCallback',
    'wrapper' => $ajax_id,
    'effect' => 'fade',
  );

  $form['actions']['submit']['#ajax'] = $ajax_settings;
  $form['actions']['publish']['#ajax'] = $ajax_settings;
  $form['actions']['unpublish']['#ajax'] = $ajax_settings;
  // @todo #33 : does not work with dropbuttons (needs javascript magic presumably).
  unset($form['actions']['publish']['#dropbutton']);
  unset($form['actions']['unpublish']['#dropbutton']);
  $form['actions']['delete']['#access'] = FALSE;

  // Ajaxify the buttons.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'Drupal\dmt_content\Form\ContentFormAlter::ajaxFormEntityNodeFormSubmit';
    }
  }

}

/**
 * Implements hook_node_links_alter().
 *
 * @param array $links
 * @param \Drupal\node\NodeInterface $entity
 * @param array $context
 */
function dmt_content_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  if ($entity->bundle() == 'content') {
    $links['content_ajax_links'] = array(
      '#theme' => 'links',
      '#weight' => -10,
      '#links' => array(),
    );
    if ($entity->access('update')) {
      $links['content_ajax_links']['#links']['ajax_edit_link'] = array(
        'title' => t('Edit'),
        'url' => Url::fromRoute(
          'dmt_content.ajax_edit_form',
          [
            'node' => $entity->id()
          ]
        ),
        'attributes' => array(
          'class' => array('use-ajax'),
        ),
      );
    }
    if ($entity->access('update')) {
      $links['content_ajax_links']['#links']['ajax_delete_link'] = array(
        'title' => t('Delete'),
        'url' => Url::fromRoute(
          'dmt_content.ajax_delete_link',
          [
            'node' => $entity->id()
          ]
        ),
        'attributes' => array(
          'class' => array('use-ajax'),
        ),
      );
    }
  }
}
