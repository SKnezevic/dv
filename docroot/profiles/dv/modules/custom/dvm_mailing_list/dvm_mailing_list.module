<?php

/**
 * @file
 * Contains dvm_mailing_list.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\group\Entity\Group;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;


/**
 * Implements hook_help().
 */
function dvm_mailing_list_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dvm_mailing_list module.
    case 'help.page.dvm_mailing_list':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DV Mailing list') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvm_mailing_list_form_group_mailing_list_add_form_alter(&$form, $form_state, $form_id) {
  // Add custom submit handler
  // $form['actions']['submit']['#submit'][] = '_dvm_mailing_list_group_form_submit';

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvm_mailing_list_form_group_mailing_list_edit_form_alter(&$form, $form_state, $form_id) {
  // Add custom submit handler
  // $form['actions']['submit']['#submit'][] = '_dvm_mailing_list_group_form_submit';
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function dvm_mailing_list_form_node_question_form_alter(&$form, FormStateInterface &$form_state) {
  $form['title']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;

  $build_info = $form_state->getBuildInfo();

  // Get the entity
  /** @var \Drupal\Core\Entity\Entity $entity */
  $entity = $build_info['callback_object']->getEntity();
  $entity_id = $entity->id();

  // if we are editing entity
  if($entity_id) {
    // disable refocus so we don't end up on the bottom of the page
    $form['actions']['submit']['#attributes']['data-disable-refocus'] = 1;
    $ajax_id = 'ajax-form-entity-node-question-' . $entity_id;
  } else {
    $form['actions']['submit']['#attributes']['data-disable-refocus'] = 1;
    // if we are adding new
    $form['#isNew'] = TRUE;
    $ajax_id = 'ajax-form-entity-node-question-new';
  }

  $form['#attributes']['class'][] = $ajax_id;

  // Ajax settings of the buttons.
  $ajax_settings = array(
    'callback' => 'Drupal\dvm_mailing_list\Form\QuestionFormAlter::ajaxFormEntityCallback',
    'wrapper' => $ajax_id,
    'effect' => 'fade',
  );
  $form['actions']['submit']['#ajax'] = $ajax_settings;
  $form['actions']['publish']['#ajax'] = $ajax_settings;
  $form['actions']['unpublish']['#ajax'] = $ajax_settings;
  // @todo : does not work with dropbuttons (needs javascript magic presumably).
  unset($form['actions']['publish']['#dropbutton']);
  unset($form['actions']['unpublish']['#dropbutton']);
  // Ajaxify the buttons.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'Drupal\dvm_mailing_list\Form\QuestionFormAlter::ajaxFormEntityNodeFormSubmit';
    }
  }

}

/**
 *  Implements hook_entity_extra_field_info().
 */
function dvm_mailing_list_entity_extra_field_info() {
  $extra['node']['question']['display']['question_edit_link'] = array(
    'label' => t('Question ajax edit link'),
    'description' => t('Provides an ajax links to manage the current entity.'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}

/**
 * Implements hook_node_links_alter().
 */
function dvm_mailing_list_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  if ($entity->bundle() == 'question') {
    $links['question_ajax_links'] = array(
      '#theme' => 'links',
      '#weight' => -10,
      '#links' => array(),
    );
    if ($entity->access('update')) {
      $links['question_ajax_links']['#links']['ajax_edit_link'] = array(
          'title' => t('Edit'),
          'url' => Url::fromRoute(
            'dvm_mailing_list.ajax_edit_form',
            [
              'node' => $entity->id()
            ]
          ),
          'attributes' => array(
            'class' => array('use-ajax'),
          ),
      );
    }
    if ($entity->access('update')) {
      $links['question_ajax_links']['#links']['ajax_delete_link'] = array(
          'title' => t('Delete'),
          'url' => Url::fromRoute(
            'dvm_mailing_list.ajax_delete_link',
            [
              'node' => $entity->id()
            ]
          ),
          'attributes' => array(
            'class' => array('use-ajax'),
          ),
      );
    }
  }
}

/**
 * Auto generate title for question node.
 *
 * Implements hook_entity_presave().
 */
function dvm_mailing_list_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() == 'question') {
    /** @var  \Drupal\node\Entity\Node $entity */
    $body_value = strip_tags($entity->get('body')->getValue()[0]['value']);
    $title = substr($body_value, 0, 254);
    $entity->set('title', $title);
    $entity->isDefaultRevision(TRUE);
  }
}

/**
 * Trigger batch on approved state.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _dvm_mailing_list_group_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {

  $group = $form_state->getFormObject()->getEntity();
  $mod_state = $group->get('moderation_state')->getValue()[0]['value'];

  if ($mod_state === 'published') {

    /** @var \Drupal\Core\Url $redirect */
    $redirect = $form_state->getRedirect();
    $group_id = $redirect->getRouteParameters()['group'];

    // getMembership gids
    $gids = $form_state->getValue('field_ml_to');

//  getIssue nids
    $group = Group::load($group_id);
    $nids = $group->get('field_ml_questions')->getValue();

    $batch = array(
      'title' => t('Set up Survey...'),
      'operations' => array(
        array(
          '\Drupal\dvm_mailing_list\BatchMailingList::cleanGroup',
          array($group_id)
        ),
        array(
          '\Drupal\dvm_mailing_list\BatchMailingList::addMembers',
          array($gids, $group_id)
        ),
        array(
          '\Drupal\dvm_mailing_list\BatchMailingList::addQuestions',
          array($nids, $group_id)
        ),
      ),
      'init_message' => t('Example Batch is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Example Batch has encountered an error.'),
      'finished' => '\Drupal\dvm_mailing_list\BatchMailingList::deleteNodeExampleFinishedCallback',
    );
    batch_set($batch);
  }

}
