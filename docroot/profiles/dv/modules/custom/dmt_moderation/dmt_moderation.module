<?php

/**
 * @file
 * Contains dmt_moderation.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\message\MessageTemplateInterface;

/**
 * Implements hook_help().
 */
function dmt_moderation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dmt_moderation module.
    case 'help.page.dmt_moderation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for message_template_form().
 */
function dmt_moderation_form_message_template_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\contact\ContactFormInterface $message_template */
  $message_template = $form_state->getFormObject()->getEntity();

  // get all moderation groups
  $groups = \Drupal::entityTypeManager()->getStorage('group')->loadByProperties(['type' => 'moderation']);

  $options = [];
  $options[] = t('None');
  foreach ($groups as $group) {
    $options[$group->uuid()] = $group->label();
  }

  $form['activity_action']['#weight'] = 40;

  // @todo: make states for this form element hide if activity_action is not moderation_action
  $form['moderation_group'] = array(
    '#type' => 'select',
    '#required' => FALSE,
    '#title' => t('Moderation Group To Send this Ticket'),
    '#description' => t('Select Moderation Group.'),
    '#default_value' => $message_template->getThirdPartySetting('activity_logger', 'moderation_group', NULL),
    '#options' => $options,
    '#weight' => 50
  );

  $form['#entity_builders'][] = 'dmt_moderation_form_message_template_form_builder';
}


/**
 * Entity builder for the message type edit form with third party options.
 *
 * @see activity_logger_form_message_template_form_alter()
 */
function dmt_moderation_form_message_template_form_builder($entity_type, MessageTemplateInterface $message_template, &$form, FormStateInterface $form_state) {
  $message_template->setThirdPartySetting('activity_logger', 'moderation_group', $form_state->getValue('moderation_group'));
}


/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dmt_moderation_activity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if($entity->bundle() == 'moderation_activity') {
    /// @todo add content to group

  }
}

/**
 * Implements hook_entity_presave().
 */
function dmt_moderation_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  if(!$entity instanceof \Drupal\Core\Entity\ContentEntityInterface) {
    return;
  }

  // check if entity is Moderated Entity
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderationInfo */
  $moderationInfo = \Drupal::service('content_moderation.moderation_information');
  if (!$moderationInfo->isModeratedEntity($entity)) {
    return;
  }

  /** @var \Drupal\dmt_moderation\Plugin\Type\SwitchModerationStateManager $switch_moderation_state_manager */
  $switch_moderation_state_manager = \Drupal::service('plugin.manager.switch_moderation_state_manager');
  $plugin_id = $switch_moderation_state_manager->getPluginId($entity);

  /** @var \Drupal\dmt_moderation\SwitchModerationStateBase $sms */
  $sms = $switch_moderation_state_manager->createInstance($plugin_id);
  $account = \Drupal::currentUser();
  $old_state = isset($entity->original->moderation_state->value) ? $entity->original->moderation_state->value : NULL;
  $sms->switchState($entity, $account, $old_state, $entity->moderation_state->value);
}


/**
 * Implements hook_entity_type_alter().
 */
function dmt_moderation_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    if($entity_type instanceof \Drupal\Core\Entity\ContentEntityType) {
      // check if entity is Moderated Entity
      if($entity_type->getHandlerClass('moderation')) {
        $entity_type->addConstraint('EntityModeration', []);      }

    }
  }
}
