<project name="custom" default="pimpmylog">
  <target name="pimpmylog">
    <!-- enable disable modules -->
    <phingcall target="setup:toggle-modules">
      <param name="environment" value="pimpmylog"/>
    </phingcall>
    <!-- create directory config.user.d -->
    <mkdir dir="/usr/share/php/pimpmylog/config.user.d" mode="777"/>
    <!-- copy files drupal.json -->
    <copy file="${repo.root}/custom/pimpmylog/drupal.json" tofile="/usr/share/php/pimpmylog/config.user.d/drupal.json" verbose="true" />
    <!--  copy file config.user.php -->
    <copy file="${repo.root}/custom/pimpmylog/config.user.php" tofile="/usr/share/php/pimpmylog/config.user.php" verbose="true" />
    <chmod file="/var/log/syslog" mode="0777" />
    <echo>Go to pimpmylog.local.dv.com if there is require error you need to chmod</echo>
  </target>
  <target name="dump_db">
    <drush command="sql-dump" alias="">
      <option name="result-file">backup.sql</option>
    </drush>
  </target>
  <target name="import_demo_content">
    <drush command="fra" assume="yes" alias="${drush.alias}" passthru="false">
      <option name="bundle">${bundle}</option>
    </drush>
    <drush command="mi organisation_groups" alias="">
    </drush>
    <drush command="mi organisations_user" alias="">
      <option name="limit">"50 items"</option>
      <option name="feedback">"10 items"</option>
    </drush>
    <drush command="mi geoarea" alias="">
      <option name="limit">"50 items"</option>
      <option name="feedback">"10 items"</option>
    </drush>
    <drush command="demo-mailing-list" alias="">
    </drush>
  </target>
  <!-- override local:setup to add db_dump because sometimes config is not exported-->
  <target name="restart">
    <phingcall target="dump_db"/>
    <phingcall target="setup">
      <property name="drush.alias" value="${drush.aliases.local}" />
      <param name="environment" value="local"/>
    </phingcall>
    <phingcall target="import_demo_content"/>
    <drush command="uli" alias="">
    </drush>
  </target>

  <target name="setup:update:features-override-check" description="Checks if features are overridden.">
    <exec dir="${docroot}" command="${drush.cmd} fl --bundle=${bundle} | grep -Ei '(changed|conflicts|added)( *)$'" outputProperty="features.overrides"/>
    <if>
      <istrue value="${features.overrides}"/>
      <then>
        <echo>A feature in the ${bundle} bundle is overridden. You must re-export this feature to incorporate the changes.</echo>
      </then>
    </if>
  </target>
</project>
